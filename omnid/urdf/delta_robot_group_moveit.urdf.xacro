<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="delta-robot-RUU">


  <!--  IMPORTANT NOTE: This URDF is for Moveit! use only, as it contains redundant joint to "serialize" the Delta Arm-->

  <!-- These parameters are stored in parameters.h and are passed in
       by calling delta_parameters at the commandline when generated the
       urdf from this xacro file, via arg:=value
Note that since this is a parallel robot it can't fully be captured by a urdf
Instead, the user must make sure the loop closure constraints are satisfied.
TODO: not all the properties are in the c header file yet and the command
line program has not been written
-->

  <!-- Radius of the base of the delta robot -->
  <xacro:arg name="R_base" default ="0.18"/>
  <xacro:property name="R_base" value="$(arg R_base)" />

  <!-- height (i.e. thickness) of the base -->
  <xacro:arg name="h_base" default ="0.009525"/>
  <xacro:property name="h_base" value="$(arg h_base)" />

  <!-- mass of the base -->
  <xacro:arg name="M_base" default ="2.5"/>
  <xacro:property name="M_base" value="$(arg M_base)" />

  <!-- Radius of the platform (i.e. end-effector) of the delta robot -->
  <xacro:arg name="R_platform" default ="0.062"/>
  <xacro:property name="R_platform" value="$(arg R_platform)" />

  <!-- height (i.e. thickness) of the platform -->
  <xacro:arg name="h_platform" default ="0.01"/>
  <xacro:property name="h_platform" value="$(arg h_platform)" />

  <!-- Mass of the platform (i.e. end-effector) of the delta robot -->
  <xacro:arg name="M_platform" default ="0.5"/>
  <xacro:property name="M_platform" value="$(arg M_platform)" />

  <!-- Length of the lower leg -->
  <xacro:arg name="L_lower" default ="0.2"/>
  <xacro:property name="L_lower" value="$(arg L_lower)" />

  <!-- Mass of the lower leg -->
  <xacro:property name="M_lower" value="1" />

  <!-- radius of lower leg cylinder -->
  <xacro:property name="R_lower" value=".009" />

  <xacro:arg name="L_upper" default ="0.368"/>
  <xacro:property name="L_upper" value="$(arg L_upper)" />

  <!-- Mass of the upper leg -->
  <xacro:property name="M_upper" value="1" />

  <!-- radius of upper leg cylinder -->
  <xacro:property name="R_upper" value=".009" />

  <!-- Properties of the pre-spring link. Currently these are specified directly
       in this file because they are not used by C code. The prespring links
       are cylindrical with axes aligned with the joint axis-->
  <!-- pre spring mass -->
  <xacro:property name="M_prespring" value="1" />

  <!-- pre spring cylinder radius -->
  <xacro:property name="R_prespring" value="0.02" />

  <!-- pre spring cylinder thickness -->
  <xacro:property name="h_prespring" value="0.01" />

  <!-- distance of the pre-spring mass from the lower arm joint -->
  <xacro:property name="prespring_offset" value="0.09" />

  <!-- Horizontal and vertical workspace limits. These are wider than the actual limits used on the robot to provide maximum flexibility in the visualization -->
  <xacro:property name="horiz_limit" value="${R_base + L_lower + L_upper}" />
  <xacro:property name="vert_limit" value="${L_lower + L_upper}" />


  <!-- offset of the base joints above the base platform. this offset is needed because the lower joints are above the base platform-->
  <xacro:arg name="base_offset" default ="0.046375"/>
  <xacro:property name="base_offset" value="$(arg base_offset)" />

<!--  xyz of the first robot-->
  <xacro:arg name="robot_1_base_x" default="0"/>
  <xacro:property name="robot_1_base_x" value="$(arg robot_1_base_x)"/>
  <xacro:arg name="robot_1_base_y" default="0"/>
  <xacro:property name="robot_1_base_y" value="$(arg robot_1_base_y)"/>
  <xacro:arg name="robot_1_base_z" default="0"/>
  <xacro:property name="robot_1_base_z" value="$(arg robot_1_base_z)"/>

  <xacro:arg name="robot_2_base_x" default="0.5"/>
  <xacro:property name="robot_2_base_x" value="$(arg robot_2_base_x)"/>
  <xacro:arg name="robot_2_base_y" default="0.5"/>
  <xacro:property name="robot_2_base_y" value="$(arg robot_2_base_y)"/>
  <xacro:arg name="robot_2_base_z" default="0"/>
  <xacro:property name="robot_2_base_z" value="$(arg robot_2_base_z)"/>

  <xacro:arg name="robot_3_base_x" default="1"/>
  <xacro:property name="robot_3_base_x" value="$(arg robot_3_base_x)"/>
  <xacro:arg name="robot_3_base_y" default="0"/>
  <xacro:property name="robot_3_base_y" value="$(arg robot_3_base_y)"/>
  <xacro:arg name="robot_3_base_z" default="0"/>
  <xacro:property name="robot_3_base_z" value="$(arg robot_3_base_z)"/>

  <xacro:property name="object_platform_base_x" value="${(robot_1_base_x + robot_2_base_x + robot_3_base_x)/3.0}"/>
  <xacro:property name="object_platform_base_y" value="${(robot_1_base_y + robot_2_base_y + robot_3_base_y)/3.0}"/>
  <xacro:property name="object_platform_base_z" value="${(robot_1_base_z + robot_2_base_z + robot_3_base_z)/3.0}"/>

<!--TODO: organize your yaml params -->
  <xacro:property name="yaml_file" value="$(find omnid)/params/params.yaml"/>
  <xacro:property name="yaml_params" value="${load_yaml(yaml_file)}"/>
  <xacro:property name="object_thickness" value="${yaml_params['object_thickness']}"/>
  <xacro:property name="object_inscribed_radius" value="${yaml_params['object_inscribed_radius']}"/>


  <!-- Compute inertial properties for a cylinder, where the reference frame is centered.
       The axis of the cylinder
       Parameters:
        M - the mass,
        R - the radius,
        h - the height of the cylinder
        axis - "z" to orient along z axis, x to orient along x axis
-->
  <xacro:macro name="cylinder_inertia" params="M R h axis">
    <!--    <origin xyz="${0 if axis == 'z' else h/2.0} 0 ${h/2.0 if axis == 'z' else 0}" rpy="0 ${0 if axis == 'z' else -pi/2.0} 0" />-->
    <inertial>
      <mass value="${M}" />

      <!-- shift the origin to the center of the link from the end. how this is done depends on if
      the cylinder is x aligned or z aligned-->
      <origin xyz="${0 if axis =='z' else h/2.0} 0 ${h/2.0 if axis=='z' else 0}" rpy="0 0 0" />

      <!-- formulas for inertia matrix components along radial and axial axes -->
      <xacro:property name="Iradial" value = "${M*h**2/12.0 + M*R**2/4.0}"/>
      <xacro:property name="Iaxial" value = "${M*R**2/2.0}" />

      <inertia ixx= "${Iradial if axis == 'z' else Iaxial}"
               ixy="0"
               ixz="0"
               iyy= "${Iradial}"
               iyz="0"
               izz="${Iaxial if axis == 'z' else Iradial}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_collision" params="M R h axis">
    <collision>
      <origin xyz="${0 if axis == 'z' else h/2.0} 0 ${h/2.0 if axis == 'z' else 0}" rpy="0 ${0 if axis == 'z' else -pi/2.0} 0" />
      <geometry>
        <cylinder radius="${R}" length="${h}" />
      </geometry>
    </collision>
  </xacro:macro>

  <!-- Create a visual cylinder with the given name that is a cylinder with mass M,
       radius R, height h, and the given material.
       if axis == 'z' the cylinder is aligned with the z axis otherwise it is aligned
            with the x axis. -->
  <xacro:macro name="cylinder_visual" params="M R h axis mat">
    <visual>
      <!-- shift the visual so that the link frame is at one end of the cylinder, and
           rotate it so that it matches the proper axis alignment -->
      <origin xyz="${0 if axis == 'z' else h/2.0} 0 ${h/2.0 if axis == 'z' else 0}" rpy="0 ${0 if axis == 'z' else -pi/2.0} 0" />
      <geometry>
        <cylinder radius="${R}" length="${h}" />
      </geometry>
      <material name="${mat}" />
    </visual>
  </xacro:macro>

  <!-- Create a cylindrical link with visual and inertial properties
       name - the name of the link
       M - the mass of the link
       R - the radius
       h - the height
       axis - z to align with z axis, x to align with x axis
       mat - the material -->
  <xacro:macro name="cylinder_link" params="name M R h axis mat">
    <link name="${name}">
      <xacro:cylinder_visual M="${M}" R="${R}" h="${h}" axis="${axis}" mat="${mat}" />
      <xacro:cylinder_inertia M="${M}" R="${R}" h="${h}" axis="${axis}" />
      <xacro:cylinder_collision M="${M}" R="${R}" h="${h}" axis="${axis}"/>
    </link>
  </xacro:macro>
  <!-- define colors -->
  <material name="base_color" >
    <color rgba="0.1 0.2 0.2 1.0"/>
  </material>

  <material name="platform_color" >
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="lower_leg_color" >
    <color rgba="0.0 0.0 0.6 1.0"/>
  </material>

  <material name="upper_leg_color" >
    <color rgba="0.0 0.6 0.0 1.0"/>
  </material>

  <material name="prespring_color" >
    <color rgba="0.6 0.6 0.6 1.0"/>
  </material>

  <material name="heart_pink" >
    <color rgba="1.0 0.76 0.80 1.0"/>
  </material>

  <material name="dark_pink" >
    <color rgba="1.0 0.43 0.51 1.0"/>
  </material>

  <material name="light_pink" >
    <color rgba="0.94 0.50 0.50 1.0"/>
  </material>




  <!-- define the base of the delta robot-->
  <xacro:macro name="base_link" params="prefix">
    <xacro:cylinder_link name="robot_${prefix}/base_link"
                         M="${M_base}"
                         R="${R_base}"
                         h="${h_base}"
                         axis="z"
                         mat="heart_pink" />

    <!-- connect the base to the world -->
    <joint name="robot_${prefix}/fixed" type="fixed">
      <parent link="world"/>
      <origin xyz="$(eval robot_${prefix}_base_x) $(eval robot_${prefix}_base_y) $(eval robot_${prefix}_base_z-base_offset)"/>
      <child link="robot_${prefix}/base_link"/>
    </joint>
    <link name="robot_${prefix}/floating_world_0"/>
    <joint name="robot_${prefix}/base_link_floating_world" type="fixed">
      <parent link="robot_${prefix}/base_link"/>
      <origin xyz="0 0 ${base_offset}" />
      <child link="robot_${prefix}/floating_world_0"/>
    </joint>
  </xacro:macro>




  <!-- a macro to define the legs.
       id - the id number of the leg
       offset - angle in radians of the line from the center to the lower leg attachment point
  -->
  <xacro:macro name="leg" params="id offset prefix">
      <!-- This link and fixed joint is used as a placeholder for where the lower leg attaches to the base -->
      <link name="robot_${prefix}/lower_leg_attach_link_${id}"/>
      <joint name="robot_${prefix}/lower_leg_attach_joint_${id}" type="fixed">
        <parent link="robot_${prefix}/floating_world_${id-1}" />
        <child link="robot_${prefix}/lower_leg_attach_link_${id}" />
        <origin xyz="${R_base*cos(offset)} ${R_base*sin(offset)} 0" rpy="0 0 ${offset}" />
        <dynamics damping="0.0" friction="0.0"/>
      </joint>
    <!-- define the pre-spring link -->
    <xacro:cylinder_link name="robot_${prefix}/lower_leg_prespring_${id}"
                         M="${M_prespring}"
                         R="${R_prespring}"
                         h="${h_prespring}"
                         axis="x"
                         mat="prespring_color" />
    <joint name="robot_${prefix}/phi_${id}" type="continuous">
      <parent link="robot_${prefix}/lower_leg_attach_link_${id}" />
      <child link="robot_${prefix}/lower_leg_prespring_${id}" />
      <origin xyz="0 -${prespring_offset} 0" rpy="0 0 ${pi/2.0}" />
      <axis xyz = "-1 0 0" rpy="0 0 0" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <!-- define the lower leg link -->
      <xacro:cylinder_link name="robot_${prefix}/lower_leg_${id}"
                           M="${M_lower}"
                           R="${R_lower}"
                           h="${L_lower}"
                           axis="x"
                           mat="light_pink"
      />
      <!-- connect the lower leg to the base, this is the after the spring angle joint -->
      <joint name="robot_${prefix}/theta_${id}" type="revolute">
        <parent link="robot_${prefix}/lower_leg_attach_link_${id}" />
        <child link="robot_${prefix}/lower_leg_${id}" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <axis xyz = "0 -1 0" rpy="0 0 0"/>
        <limit lower="${-pi/4.0}" upper="${pi/2.0}" effort="100" velocity="100" />
        <dynamics damping="0.0" friction="0.0"/>
      </joint>
      <!-- define a frame at the knee between the lower and upper legs -->
      <link name="robot_${prefix}/knee_${id}" />
      <!-- define the universal joint between he upper and lower links. This is the knee pitch angle joint -->
      <joint name="robot_${prefix}/beta_${id}" type="continuous">
        <parent link="robot_${prefix}/lower_leg_${id}" />
        <child link="robot_${prefix}/knee_${id}" />
        <origin xyz="${L_lower} 0 0" rpy="0 0 0" />
        <axis xyz="0 -1 0" rpy="0 0 0" />
        <dynamics damping="0.0" friction="0.0"/>
      </joint>
      <!-- define the upper arm link -->
      <xacro:cylinder_link name="robot_${prefix}/upper_leg_${id}"
                           M="${M_upper}"
                           R="${R_upper}"
                           h="${L_upper}"
                           axis="x"
                           mat="dark_pink"
      />
      <!-- this is the knee yaw angle joint -->
      <joint name="robot_${prefix}/gamma_${id}" type="continuous">
        <parent link="robot_${prefix}/knee_${id}" />
        <child link="robot_${prefix}/upper_leg_${id}" />
        <axis xyz="0 0 -1" rpy="0 0 0" />
        <dynamics damping="0.0" friction="0.0"/>
      </joint>
    <!--      the chain for serialization -->
    <joint name="robot_${prefix}/mimic_gamma_${id}" type="continuous">
      <parent link="robot_${prefix}/upper_leg_${id}" />
      <child link="robot_${prefix}/mimic_knee_link_${id}" />
      <axis xyz="0 0 -1" rpy="0 0 0" />
      <dynamics damping="0.0" friction="0.0"/>
      <mimic joint="robot_${prefix}/gamma_${id}" multiplier="-1" offset="0"/>
    </joint>
    <link name="robot_${prefix}/mimic_knee_link_${id}"/>
    <joint name="robot_${prefix}/mimic_beta_${id}" type="continuous">
      <parent link="robot_${prefix}/mimic_knee_link_${id}" />
      <child link="robot_${prefix}/extra_knee_link_${id}" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <axis xyz="0 -1 0" rpy="0 0 0" />
      <dynamics damping="0.0" friction="0.0"/>
      <mimic joint="robot_${prefix}/beta_${id}" multiplier="-1" offset="0"/>
    </joint>
    <link name="robot_${prefix}/extra_knee_link_${id}"/>
    <joint name="robot_${prefix}/extra_knee_lower_leg_${id}" type="fixed">
      <parent link="robot_${prefix}/extra_knee_link_${id}" />
      <child link="robot_${prefix}/mimic_lower_leg_${id}" />
      <origin xyz="${-L_lower} 0 0" rpy="0 0 0" />
    </joint>
    <link name="robot_${prefix}/mimic_lower_leg_${id}"/>
    <joint name="robot_${prefix}/mimic_theta_${id}" type="revolute">
      <parent link="robot_${prefix}/mimic_lower_leg_${id}" />
      <child link="robot_${prefix}/mimic_theta_link_${id}" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <axis xyz = "0 -1 0" rpy="0 0 0"/>
      <limit lower="${-pi/2.0}" upper="${pi/2.0}" effort="100" velocity="100" />
      <dynamics damping="0.0" friction="0.0"/>
      <mimic joint="robot_${prefix}/theta_${id}" multiplier="-1" offset="0"/>
    </joint>
    <link name="robot_${prefix}/mimic_theta_link_${id}"/>
    <joint name="robot_${prefix}/mimic_theta_link_floating_world_${id}" type="fixed">
      <parent link="robot_${prefix}/mimic_theta_link_${id}" />
      <child link="robot_${prefix}/floating_world_${id}" />
      <origin xyz="${-R_base} 0 0" rpy="0 0 ${-offset}" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="robot_${prefix}/floating_world_${id}"/>
    <!--The chain for serialization ends here-->
  </xacro:macro>




  <!--  tail_id - id of the leg that attaches to the end effector. Note only one leg can be attached to the end_effector-->
  <xacro:macro name="end_effector" params="tail_id prefix">
    <!-- The x,y,z position of the platform is handled by a chain of 3 prismatic joints -->
    <!-- handle the x motion of the platform -->
    <link name="robot_${prefix}/platform_x_link" />
    <joint name="robot_${prefix}/x" type="prismatic" >
      <parent link="robot_${prefix}/floating_world_${tail_id}" />
      <child link="robot_${prefix}/platform_x_link" />
      <axis xyz="1 0 0" />
      <!-- Limits are required but currently arbitrary -->
      <limit lower="${-horiz_limit}" upper="${horiz_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <!-- handle the y motion of the platform -->
    <link name="robot_${prefix}/platform_y_link" />
    <joint name="robot_${prefix}/y" type="prismatic" >
      <parent link="robot_${prefix}/platform_x_link" />
      <child link="robot_${prefix}/platform_y_link" />
      <axis xyz="0 1 0" />
      <!-- Limits are required but currently arbitrary -->
      <limit lower="${-horiz_limit}" upper="${horiz_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <!-- handle the z motion of the platform -->
    <joint name="robot_${prefix}/z" type="prismatic" >
      <parent link="robot_${prefix}/platform_y_link" />
      <child link="robot_${prefix}/dummy_platform_link" />
      <axis xyz="0 0 1" />
      <!-- Limits are required but currently arbitrary -->
      <limit lower="0" upper="${vert_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
<!--    define a dummy link for visualization-->
    <link name="robot_${prefix}/dummy_platform_link"/>
    <joint name="robot_${prefix}/dummy_platform" type="fixed">
      <parent link="robot_${prefix}/dummy_platform_link"/>
      <origin xyz="0 0 0"/>
      <child link="robot_${prefix}/platform_link"/>
    </joint>
    <!-- define the end-effector platform -->
    <xacro:cylinder_link name="robot_${prefix}/platform_link"
                         M="${M_platform}"
                         R="${R_platform}"
                         h="${h_platform}"
                         axis="z"
                         mat="heart_pink" />
  </xacro:macro>



  <xacro:macro name="delta_arm" params="prefix">
    <xacro:base_link prefix="${prefix}"/>
    <xacro:leg id="1" offset="0" prefix="${prefix}"/>
    <xacro:leg id="2" offset="${2*pi/3.0}" prefix="${prefix}"/>
    <xacro:leg id="3" offset="${4*pi/3.0}" prefix="${prefix}"/>
    <xacro:end_effector tail_id="3" prefix="${prefix}"/>
  </xacro:macro>

<!--
  NOTE: PLEASE DO NOT CHANGE THIS SECTION, AS OMNID_PLANNING_ADAPTER_PLUGIN
  DEPENDS DIRECTLY ON CONFIGURATIONS HERE
-->
  <xacro:macro name="object_platform">
    <joint name="object_platform/fixed" type="fixed">
      <parent link="world"/>
      <origin xyz="${object_platform_base_x} ${object_platform_base_y} ${object_platform_base_z}"/>
      <child link="object_platform_base"/>
    </joint>
    <link name="object_platform_base"/>
    <joint name="object_platform/x" type="prismatic" >
      <parent link="object_platform_base" />
      <child link="object_platform_x_link" />
      <axis xyz="1 0 0" />
      <limit lower="${-horiz_limit}" upper="${horiz_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_x_link"/>
    <joint name="object_platform/y" type="prismatic" >
      <parent link="object_platform_x_link" />
      <child link="object_platform_y_link" />
      <axis xyz="0 1 0" />
      <limit lower="${-horiz_limit}" upper="${horiz_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_y_link"/>
    <joint name="object_platform/z" type="prismatic" >
      <parent link="object_platform_y_link" />
      <child link="object_platform_z_link" />
      <axis xyz="0 0 1" />
      <limit lower="${-horiz_limit}" upper="${horiz_limit}" effort="100" velocity="100"/>
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_z_link"/>
    <!--  we are following the ROS yaw-pitch-row convention-->
    <joint name="object_platform/yaw" type="revolute" >
      <parent link="object_platform_z_link" />
      <child link="object_platform_yaw_link" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <axis xyz="0 0 1" rpy="0 0 0"/>
      <limit lower="${-pi/2.0}" upper="${pi/2.0}" effort="100" velocity="100" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_yaw_link"/>

    <joint name="object_platform/pitch" type="revolute" >
      <parent link="object_platform_yaw_link" />
      <child link="object_platform_pitch_link" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <axis xyz="0 1 0" rpy="0 0 0"/>
      <limit lower="${-pi/2.0}" upper="${pi/2.0}" effort="100" velocity="100" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_pitch_link"/>

    <joint name="object_platform/roll" type="revolute" >
      <parent link="object_platform_pitch_link" />
      <child link="object_platform_roll_link" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <axis xyz="1 0 0" rpy="0 0 0"/>
      <limit lower="${-pi/2.0}" upper="${pi/2.0}" effort="100" velocity="100" />
      <dynamics damping="0.0" friction="0.0"/>
    </joint>
    <link name="object_platform_roll_link"/>

    <joint name="object_platform_eef" type="fixed">
      <parent link="object_platform_roll_link"/>
      <origin xyz="0 0 0"/>
      <child link="object_platform_end_effector"/>
    </joint>
<!--    <link name="object_platform_end_effector"/>-->
<!--    TODO-->
    <xacro:cylinder_link name="object_platform_end_effector"
                         M="${M_platform}"
                         R="${object_inscribed_radius}"
                         h="${object_thickness}"
                         axis="z"
                         mat="dark_pink" />

  </xacro:macro>

<!--  robot group set up. All arms are internally connected to the world link -->
  <link name="world"/>
  <xacro:delta_arm prefix="1"/>
  <xacro:delta_arm prefix="2"/>
  <xacro:delta_arm prefix="3"/>
  <xacro:object_platform/>

</robot>
