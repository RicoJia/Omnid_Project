#!/usr/bin/env python3

'''
The Omnid simulator that connects bullet to ROS.
Subscribes : /cmd_vel
'''

import rospy
import pybullet as p
import rospkg
import numpy as np
import pybullet_data
from omnid_model import Omnid_Model
import roslib
from sensor_msgs.msg import JointState

import actionlib

from std_msgs.msg import Float64
from trajectory_msgs.msg import JointTrajectory
from control_msgs.msg import FollowJointTrajectoryAction
from control_msgs.msg import FollowJointTrajectoryFeedback
from control_msgs.msg import FollowJointTrajectoryResult


roslib.load_manifest("omnid")

class Omnid_Simulator:
  def __init__(self, urdf_path):
    self.joint_state_pub = rospy.Publisher('omnid/joint_states', JointState, queue_size=10)
    use_spring = not(rospy.get_param("~test_without_spring", False))
    test_with_end_effector_xyz = rospy.get_param("~test_with_end_effector_xyz")
    after_spring_actuated = rospy.get_param("~after_spring_actuated")
    urdf_name = rospy.get_param("~urdf_name")
    self.omnid_model = Omnid_Model(urdfRootPath=urdf_path,
                                   use_spring=use_spring,
                                   test_with_end_effector_xyz=test_with_end_effector_xyz,
                                   after_spring_actuated = after_spring_actuated,
                                   urdf_name = urdf_name)


    test_joint_control = rospy.get_param("~test_joint_control")
    if test_joint_control:
      self.joint_state_sub = rospy.Subscriber('joint_states_control', JointState, self.updateJointStates_CB)
    else:
      controller_namespace = rospy.get_param("~controller_namespace")
      self.action_server = actionlib.SimpleActionServer(controller_namespace + '/follow_joint_trajectory',
                                                            FollowJointTrajectoryAction,
                                                            execute_cb=self.processFollowTrajectory,
                                                            auto_start=False)
      self.action_server.start()

  def jointStatesPub(self):
    self.joint_state_pub.publish(self.omnid_model.returnJointStateMsg())
  def executeMotionCommands(self):
    self.omnid_model.executeAllMotorPosCommands()
  def updateJointStates_CB(self, msg):
    """
    API function for as a ROS Subscriber callback_function updating joint positions.
    """
    self.omnid_model.updateJointStates(msg.name, msg.position)

  def processFollowTrajectory(self, goal):
      """
      Call back function for Moveit! trajectory following action request.
      :param goal: the goal trajectory of actuated joints, i.e, phi angles.
      """
      success = True
      traj = goal.trajectory
      num_points = len(traj.points)
      # figure out joint names and their positions
      joint_names = traj.joint_names
      #start from point 1, since the first point is the current starting point
      for i in range(1, num_points):
          #check for pre-emption
          if self.action_server.is_preempt_requested():
              rospy.loginfo("%Trajectory Action Preempted on Omnid" )
              self.action_server.set_preempted()
              success = False
              break
          #figure out the duration and joint positions of each trajectory segment
          duration = (traj.points[i].time_from_start - traj.points[i-1].time_from_start ).to_sec()
          joint_positions = traj.points[i].positions
          #update the joints
          self.omnid_model.updateJointStates(joint_names, joint_positions)
          #realize each segment and time it
          r = rospy.Rate(1.0/duration)
          r.sleep()
          #check if the action has been preempted

      if success:
          msg = 'Trajectory completed'
          rospy.loginfo(msg)
          res = FollowJointTrajectoryResult()
          self.action_server.set_succeeded(result=res, text=msg)


if __name__ == "__main__":
    try:
      rospy.init_node("omnid_node")
      c = p.connect(p.SHARED_MEMORY)
      if (c < 0):
        c = p.connect(p.GUI)
      p.setAdditionalSearchPath(pybullet_data.getDataPath())
      p.resetSimulation()
      p.loadURDF("plane.urdf" )  #loads from the root pybullet library
      p.setGravity(0, 0, -10.0)
      urdf_path = ((rospkg.RosPack()).get_path('omnid'))+'/urdf'
      omnid_simulator = Omnid_Simulator(urdf_path)

      p.setRealTimeSimulation(0)

      # global joint_values
      timeStep = 0.001
      r = rospy.Rate(1.0/timeStep)
      p.setTimeStep(timeStep)
      while p.isConnected() and not rospy.is_shutdown():
        omnid_simulator.executeMotionCommands()
        omnid_simulator.jointStatesPub()
        p.stepSimulation()
        r.sleep()
    except rospy.ROSInterruptException:
        pass

#############################################
#
#         trajectory = []
#         time = rospy.Time.now() + rospy.Duration(0.01)
#
#         # every single time, get the start time (?), push every single joint as a "segment" into a trajectory,
#         for i in range(num_points):
#             seg = Segment(self.num_joints)
#
#             if traj.header.stamp == rospy.Time(0.0):
#                 seg.start_time = (time + traj.points[i].time_from_start).to_sec() - durations[i]
#             else:
#                 seg.start_time = (traj.header.stamp + traj.points[i].time_from_start).to_sec() - durations[i]
#
#             seg.duration = durations[i]
#
#             for j in range(self.num_joints):
#                 if traj.points[i].velocities:
#                     seg.velocities[j] = traj.points[i].velocities[lookup[j]]
#                 if traj.points[i].positions:
#                     seg.positions[j] = traj.points[i].positions[lookup[j]]
#
#             trajectory.append(seg)
#
#         rate = rospy.Rate(self.update_rate)
#
#         #wait until trajectory header time is larger (?)
#         while traj.header.stamp > time:
#             time = rospy.Time.now()
#             rate.sleep()
#
#         end_time = traj.header.stamp + rospy.Duration(sum(durations))
#         seg_end_times = [rospy.Time.from_sec(trajectory[seg].start_time + durations[seg]) for seg in range(len(trajectory))]
#         self.trajectory = trajectory
#         traj_start_time = rospy.Time.now()
#
# #        execute the motion commands
#         for seg in range(len(trajectory)):
#             # first point in trajectories calculated by OMPL is current position with duration of 0 seconds, skip it
#             multi_packet = {}
#
#             for port, joints in self.port_to_joints.items():
#                 vals = []
#
#                 for joint in joints:
#                     j = self.joint_names.index(joint)
#
#                     start_position = self.joint_states[joint].current_pos
#                     if seg != 0: start_position = trajectory[seg - 1].positions[j]
#
#                     desired_position = trajectory[seg].positions[j]
#                     desired_velocity = max(self.min_velocity, abs(desired_position - start_position) / durations[seg])
#
#                     self.msg.desired.positions[j] = desired_position
#                     self.msg.desired.velocities[j] = desired_velocity
#
#                     # probably need a more elegant way of figuring out if we are dealing with a dual controller
#                     if hasattr(self.joint_to_controller[joint], "master_id"):
#                         master_id = self.joint_to_controller[joint].master_id
#                         slave_id = self.joint_to_controller[joint].slave_id
#                         master_pos, slave_pos = self.joint_to_controller[joint].pos_rad_to_raw(desired_position)
#                         spd = self.joint_to_controller[joint].spd_rad_to_raw(desired_velocity)
#                         vals.append((master_id, master_pos, spd))
#                         vals.append((slave_id, slave_pos, spd))
#                     else:
#                         motor_id = self.joint_to_controller[joint].motor_id
#                         pos = self.joint_to_controller[joint].pos_rad_to_raw(desired_position)
#                         spd = self.joint_to_controller[joint].spd_rad_to_raw(desired_velocity)
#                         vals.append((motor_id, pos, spd))
#
#                 multi_packet[port] = vals
#
#             for port, vals in multi_packet.items():
#                 self.port_to_io[port].set_multi_position_and_speed(vals)
#
#             while time < seg_end_times[seg]:
#                 # check if new trajectory was received, if so abort current trajectory execution
#                 # by setting the goal to the current position
#                 if self.action_server.is_preempt_requested():
#                     msg = 'New trajectory received. Aborting old trajectory.'
#                     multi_packet = {}
#
#                     for port, joints in self.port_to_joints.items():
#                         vals = []
#
#                         for joint in joints:
#                             cur_pos = self.joint_states[joint].current_pos
#
#                             motor_id = self.joint_to_controller[joint].motor_id
#                             pos = self.joint_to_controller[joint].pos_rad_to_raw(cur_pos)
#
#                             vals.append((motor_id, pos))
#
#                         multi_packet[port] = vals
#
#                     for port, vals in multi_packet.items():
#                         self.port_to_io[port].set_multi_position(vals)
#
#                     self.action_server.set_preempted(text=msg)
#                     rospy.logwarn(msg)
#                     return
#
#                 rate.sleep()
#                 time = rospy.Time.now()
#
#             # Verifies trajectory constraints
#             for j, joint in enumerate(self.joint_names):
#                 if self.trajectory_constraints[j] > 0 and self.msg.error.positions[j] > self.trajectory_constraints[j]:
#                     res = FollowJointTrajectoryResult()
#                     res.error_code=FollowJointTrajectoryResult.PATH_TOLERANCE_VIOLATED
#                     msg = 'Unsatisfied position constraint for %s, trajectory point %d, %f is larger than %f' % \
#                           (joint, seg, self.msg.error.positions[j], self.trajectory_constraints[j])
#                     rospy.logwarn(msg)
#                     self.action_server.set_aborted(result=res, text=msg)
#                     return
#
#         # Check that we have ended inside the goal constraints (?)pos_constraint?
#         for (joint, pos_error, pos_constraint) in zip(self.joint_names, self.msg.error.positions, self.goal_constraints):
#             if pos_constraint > 0 and abs(pos_error) > pos_constraint:
#                 res = FollowJointTrajectoryResult()
#                 res.error_code=FollowJointTrajectoryResult.GOAL_TOLERANCE_VIOLATED
#                 msg = 'Aborting because %s joint wound up outside the goal constraints, %f is larger than %f' % \
#                       (joint, pos_error, pos_constraint)
#                 rospy.logwarn(msg)
#                 self.action_server.set_aborted(result=res, text=msg)
#                 break
#         else:
#             msg = 'Trajectory execution successfully completed'
#             rospy.loginfo(msg)
#             res = FollowJointTrajectoryResult()
#             res.error_code=FollowJointTrajectoryResult.SUCCESSFUL
#             self.action_server.set_succeeded(result=res, text=msg)
