base_offset: 0.046375   #how much the base should be lifted to bring to the ground.
leg_num: 3      #total number of legs

#Joint Position Controller parameters
kp : 1
kd : 0.6
max_motor_force : 150000

urdf_name: "delta_robot_pybullet.urdf"  #file name of the URDF

spring_parent_link_name : "lower_leg_prespring"   #link connects to the pre-spring joint
spring_child_link_name : "lower_leg"    #links connects to the after-spring joint
upper_leg_name: "upper_leg"   #leg connects to the end-effector platform
upper_leg_length: 0.368   #length of the upper leg, see URDF

# We initialize our arm with identical pre_spring joint values (radians)
pre_spring_joint_info: {"phi": 0.70}   #name of the pre_spring_joint: joint_initial_value
after_spring_joint_info: {"theta":0.90} #name of the after_spring_joint: joint_initial_value

end_effector_initial_xyz: {"x":0.0, "y":0.0, "z":0.42}
end_effector_thickness: 0.01   #thickness of the end effector platform
end_effector_radius: 0.062
end_effector_name: "platform_link"    #end-effector platform name

leg_pos_on_end_effector: {"upper_leg_1": 0.0, "upper_leg_2": rad(2.0*pi/3.0), "upper_leg_3": rad(4.0*pi/3.0)} #angular positions of upper legs on the platform

#spring params - our spring applies "equivalent forces" on the lower arm and pre-spring links. Find where you want to apply these forces based on URDF.
force_axis_c: [0.0, 0.0, 1.0]   #positive unit vector of force on child link of after_spring_joint, when torque from the spring is positive
lower_arm_length: 0.2   #length of the lower arm, right after the after_spring joint.
force_pos_c: [0.1, 0.0, 0.0]  #where we want to apply the equivalent spring force on the child link (positive direction is specified in force_axis_c)
force_axis_p : [0.0, 0.0, 1.0]   #positive unit vector of force on link of before_spring_joint, when torque from the spring is positive
pre_spring_radius: 0.02   # radius of the pre-spring link
force_pos_p: [0.0, 0.02, 0.0]  #where we want to apply the equivalent spring force on link of before_spring_joint (positive direction is specified in force_axis_p)
torque_k: 1000.0    #torsion spring constant

#controller setup for Moveit! interface. Change this before modifying the Moveit! setup
controller_namespace: "end_effector_arm_controller"   #action_ns of omnid_moveit_config's controllers.yaml

#Test parameters. For production default value is false for every item here
after_spring_actuated: true   #By default, the pre-spring joints are actuated. However, that requires a PID controller. For testing purposes, we can apply control directly on after-spring joints.
test_joint_control: false #enable direct joint level control on pre_spring joints (phi)
test_with_end_effector_xyz: false  #enable actuation on the end-effector x, y, z joints, which means other joint control will not be effective. Note that you have to set test_mode_on to start testing.
test_without_spring: true