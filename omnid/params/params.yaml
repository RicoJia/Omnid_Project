# This file has all the parameters needed for the omnid project

#NOTE: Parameters shared by urdf, moveit plugins.
object_clearance: 0.2   #the gap between the bottom of the object and the top of the robot end effector when the the object platform is horitontal
object_thickness: 0.01
object_inscribed_radius: 0.8  #the object is modelled as a cylinder in Moveit.
object_mass: 50.0   #in kg
base_positions: [[0.0, 0.0, 0.0], [0.5, 0.5, 0.0], [1.0, 0.0, 0.0]]   #Cartesian coordinates of the each robot's base_link
h_platform: 0.01 #delta_arm_end_effector_thickness
base_offset: 0.046375   #how much the base should be lifted to bring to the ground.
leg_num: 3      #total number of legs

#High level parameters
robot_names: ["robot_1", "robot_2", "robot_3"]  #the first part of joint names in URDF.
object_name: "object_platform"  #also is the prefix of the object platform's joints in the urdf for moveit

#omnid_move_group_interface & omnid_planning_adapter_plugin
world_frame_name: "world"
body_frame_name_prefix: "robot_"
floating_world_frame_name: "/floating_world_0" #the name of the first "floating world" name of each robot. please include '/' if there is any. see each robot's URDF
group_reference_frame_name: "object_platform_base"
planning_group_prefix: "end_effector_arm_"
object_platform_planning_group_name: "object_platform_arm"
object_platform_eef_name: "object_platform_roll_link"
eef_update_topic_name: "/rviz_moveit_motion_planning_display/robot_interaction_interactive_marker_topic/update"
eef_update_frame_name: "EE:goal_object_platform_roll_link"
robot_planning_group_names: ["end_effector_arm_1", "end_effector_arm_2", "end_effector_arm_3"]  #each robot (not including the object platform arm) planning group's name in SRDF
object_platform_name: "object_platform"

#IK plugin
theta_name: "theta" #see Matt's inverse kinematics pdf
gamma_name: "gamma" #see Matt's inverse kinematics pdf
beta_name: "beta"


omnid_simulator:
  #Joint Position Controller parameters
  kp : 1
  kd : 0.6
  max_motor_force : 150000

  urdf_name: "delta_robot_pybullet.urdf"  #file name of the URDF

  spring_parent_link_name : "lower_leg_prespring"   #link connects to the pre-spring joint
  spring_child_link_name : "lower_leg"    #links connects to the after-spring joint
  upper_leg_name: "upper_leg"   #leg connects to the end-effector platform
  upper_leg_length: 0.368   #length of the upper leg, see URDF

  # We initialize our arm with identical pre_spring joint values (radians)
  pre_spring_joint_info: {"phi": 0.70}   #name of the pre_spring_joint: joint_initial_value
  after_spring_joint_info: {"theta":1.50} #name of the after_spring_joint: joint_initial_value
  object_platform_joint_info: {"x": 0, "y": 0, "z": 0, "roll": 0, "pitch": 0, "yaw": 0}   #PLEASE DO NOT CHANGE THESE NAMES AND THEIR ORDERING! joint names should match those of moveit urdf's object platform joints

  end_effector_initial_xyz: {"x":0.0, "y":0.0, "z":0.42}
  end_effector_radius: 0.062    #Delta Robot end effector radius
  end_effector_name: "platform_link"    #end-effector platform name

  leg_pos_on_end_effector: {"upper_leg_1": 0.0, "upper_leg_2": rad(2.0*pi/3.0), "upper_leg_3": rad(4.0*pi/3.0)} #angular positions of upper legs on the platform

  #spring params - our spring applies "equivalent forces" on the lower arm and pre-spring links. Find where you want to apply these forces based on URDF.
  force_axis_c: [0.0, 0.0, 1.0]   #positive unit vector of force on child link of after_spring_joint, when torque from the spring is positive
  lower_arm_length: 0.2   #length of the lower arm, right after the after_spring joint.
  force_pos_c: [0.1, 0.0, 0.0]  #where we want to apply the equivalent spring force on the child link (positive direction is specified in force_axis_c)
  force_axis_p : [0.0, 0.0, 1.0]   #positive unit vector of force on link of before_spring_joint, when torque from the spring is positive
  pre_spring_radius: 0.02   # radius of the pre-spring link
  force_pos_p: [0.0, 0.02, 0.0]  #where we want to apply the equivalent spring force on link of before_spring_joint (positive direction is specified in force_axis_p)
  torque_k: 1000.0    #torsion spring constant

  #controller setup for Moveit! interface. Change this before modifying the Moveit! setup
  controller_namespace: "all_arms_controller"   #action_ns of omnid_moveit_config's omnid_controllers.yaml

  #Test parameters. For production default value is false for every item here
  after_spring_actuated: true   #By default, the pre-spring joints are actuated. However, that requires a PID controller. For testing purposes, we can apply control directly on after-spring joints.
  test_joint_control: true #enable direct joint level control on pre_spring joints (phi)
  test_with_end_effector_xyz: false  #enable actuation on the end-effector x, y, z joints, which means other joint control will not be effective. Note that you have to set test_mode_on to start testing.
  test_without_spring: true